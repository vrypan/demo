name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository != 'vrypan/bckt-blog-template'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine bckt version
        id: version
        run: |
          if [ -f .bckt-version ]; then
            VERSION=$(cat .bckt-version | tr -d '[:space:]')
            echo "Using pinned version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION=$(curl -s https://api.github.com/repos/vrypan/bckt/releases/latest | jq -r .tag_name)
            echo "Using latest version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Download bckt
        run: |
          VERSION=${{ steps.version.outputs.version }}
          ARCH="x86_64-unknown-linux-gnu"
          URL="https://github.com/vrypan/bckt/releases/download/${VERSION}/bckt-${ARCH}.tar.xz"

          echo "Downloading bckt from: $URL"
          curl -L -o bckt.tar.xz "$URL"
          tar -xJf bckt.tar.xz --strip-components=1
          chmod +x bckt bckt-new bckt-fc
          sudo mv bckt bckt-new bckt-fc /usr/local/bin/

          echo "bckt version:"
          bckt --version

      - name: Create bckt.yaml from template
        run: |
          if [ ! -f "bckt.yaml" ] && [ -f "bckt.yaml.example" ]; then
            echo "Creating bckt.yaml from template..."
            # Extract owner and repo name from GITHUB_REPOSITORY
            OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
            REPO=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
            BASE_URL="https://${OWNER}.github.io/${REPO}"

            # Create bckt.yaml with the correct base_url
            sed "s|base_url: .*|base_url: $BASE_URL|" bckt.yaml.example > bckt.yaml
            echo "Created bckt.yaml with base_url: $BASE_URL"
          else
            echo "bckt.yaml already exists, skipping creation"
          fi

      - name: Download bckt3 theme (first time only)
        run: |
          if [ ! -d "templates" ] && [ ! -d "skel" ] && [ ! -d "pages" ]; then
            echo "Theme directories not found, downloading bckt3 theme..."
            bckt themes download --github vrypan/bckt/themes bckt3 --force
            bckt themes use bckt3 --force
          else
            echo "Theme already set up, skipping download"
          fi

      - name: Render site
        run: bckt render

      - name: Commit bckt.yaml and theme files if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add bckt.yaml and theme directories if they exist
          [ -f "bckt.yaml" ] && git add bckt.yaml
          [ -d "pages" ] && git add pages/
          [ -d "skel" ] && git add skel/
          [ -d "templates" ] && git add templates/
          [ -d "assets" ] && git add assets/
          [ -d "themes" ] && git add themes/

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-generated bckt.yaml and theme files from template"
            git push
            echo "Files committed and pushed"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./html

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Check deployment status
        if: steps.deployment.outcome == 'failure'
        run: |
          echo "::warning::GitHub Pages deployment failed. This is expected on the first run."
          echo "::notice::Please configure GitHub Pages in your repository settings:"
          echo "::notice::1. Go to Settings > Pages"
          echo "::notice::2. Under 'Source', select 'GitHub Actions'"
          echo "::notice::3. Re-run this workflow after configuration"
          exit 0
